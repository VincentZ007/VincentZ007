<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://VincentZ007.github.io/</id>
    <title>Vincent&apos;s Blog</title>
    <updated>2020-08-28T02:03:50.320Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://VincentZ007.github.io/"/>
    <link rel="self" href="https://VincentZ007.github.io/atom.xml"/>
    <subtitle>一二三四五六七八九十</subtitle>
    <logo>https://VincentZ007.github.io/images/avatar.png</logo>
    <icon>https://VincentZ007.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Vincent&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[# 力扣-机器人能否返回原点]]></title>
        <id>https://VincentZ007.github.io/post/li-kou-ji-qi-ren-neng-fou-fan-hui-yuan-dian/</id>
        <link href="https://VincentZ007.github.io/post/li-kou-ji-qi-ren-neng-fou-fan-hui-yuan-dian/">
        </link>
        <updated>2020-08-28T11:52:44.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>难度 <font color=#00FF00>简单</font></p>
<p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。</p>
<p>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。</p>
<p>注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p>
<hr>
<p>示例 1:<br>
输入: &quot;UD&quot;<br>
输出: true<br>
解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。</p>
<p>示例 2:<br>
输入: &quot;LL&quot;<br>
输出: false<br>
解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。</p>
<hr>
<p>解法：</p>
<pre><code>class Solution {
    public boolean judgeCircle(String moves) {
        int ud=0,lr=0;
        char [] temp = moves.toCharArray();
        for(int i=0;i&lt;temp.length;i++){
            if(temp[i]=='R')lr+=1;
            else if(temp[i]=='L')lr-=1;
            else if(temp[i]=='U')ud+=1;
            else if(temp[i]=='D')ud-=1;
        }
        if(ud==0&amp;&amp;lr==0){
            return true;
        }
        else{
            return false;
        }
    }
}
</code></pre>
<hr>
<p>分析：<br>
整体思路是用两个整数，一个记录上下，一个记录左右。<br>
如果往右，左右的就加一，往左，左右的就减一。<br>
如果往上，上下的就加一，往下，上下的就减一。<br>
那么首先就应该把这个字符串转换成char数组，这样就可以用for循环一个个检测了。<br>
最后判断上下，左右是否为0，如果为0，那就return true。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# 力扣-两数之和]]></title>
        <id>https://VincentZ007.github.io/post/li-kou-liang-shu-zhi-he/</id>
        <link href="https://VincentZ007.github.io/post/li-kou-liang-shu-zhi-he/">
        </link>
        <updated>2020-08-20T17:37:13.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>难度 <font color=#00FF00>简单</font></p>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<hr>
<p>示例：</p>
<pre><code>给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
</code></pre>
<hr>
<p>解法：</p>
<pre><code>class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i&lt;nums.length;i++){
            for(int j=i+1;j&lt;nums.length;j++){
                if(nums[j]==target-nums[i]){
                    return new int[] {i,j};
                }
            }
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
        /*这一句我不知道是什么意思，但是看样子应该是返回一句话就是说没有解；来解决报错“missing return statement”的问题*/
    }
}
</code></pre>
<hr>
<p>分析：<br>
既然题目要求找出和为target的两个数，那我们就把所有数给试一遍。第一个循环是数组里的所有数，第二个循环就是当前[i]的后面所有数字，这样可以比j=0更加高效。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/07/18]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200718/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200718/">
        </link>
        <updated>2020-07-18T09:26:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="顺序表与链表的比较">顺序表与链表的比较</h1>
<ol>
<li>存取方式<br>
顺序表可以顺序存取<strong>也可以</strong>随机存取，<br>
链表<strong>只能</strong>从表头顺序存取元素。</li>
<li>逻辑结构与物理结构<br>
采用顺序存储时，逻辑上相邻的元素，对应的物理存储位置<strong>也</strong>相邻。<br>
采用链式存储时，逻辑上相邻的元素，对应的物理存储位置<strong>不一定</strong>相邻，逻辑关系是用<strong>指针</strong>来表示的。</li>
<li>查找、插入和删除<br>
| null | 顺序表 | 链表 |<br>
| 查找 | O(n) | O(n) |<br>
| 插入 | O(n) | O(1) |<br>
| 删除 | O(n) | O(1) |</li>
<li>空间分配<br>
顺序表是静态空间分配，<br>
链表是动态空间分配。</li>
</ol>
<h1 id="实际应用中表的选取">实际应用中表的选取</h1>
<ol>
<li>基于存储考虑<br>
顺序表：可以估计线性表的长度或存储规模时采用。<br>
链表：不用事先知道存储规模，但链表的存储密度低。</li>
<li>基于运算考虑<br>
顺序表：经常访问链表中的元素时使用。<br>
链表：经常插入或者删除时使用。</li>
<li>基于环境考虑<br>
顺序表：直接采用数组，容易实现。<br>
链表：基于指针实现，相对较为繁琐。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/07/08]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200708/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200708/">
        </link>
        <updated>2020-07-08T08:10:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="双链表">双链表</h1>
<p>说明：单链表结点中只有一个指向其后继的指针，使得单链表只能从头结点依次顺序地向后访问。为了克服单链表只能从前往后的访问的缺陷，引入prior指针，使得链表可以向前访问。<br>
结构示意图：<br>
<img src="https://VincentZ007.github.io//post-images/1594188305261.png" alt="" loading="lazy"></p>
<h1 id="建表">建表</h1>
<pre><code>//尾插法建表
public DLinkList buildDLinkList(int[] arr) {
		DLinkList head = new DLinkList();
		head.next = null;
		head.prior = null;
		head.data = 0;
		DLinkList r = head;
		int count = 0;
		while (count &lt; arr.length) {
			DLinkList p = new DLinkList();
			p.data = arr[count++];
			p.next = r.next;
			p.prior = r;
			r.next = p;
			r = p;
		}
		return head;
	}
</code></pre>
<h1 id="插入删除">插入删除</h1>
<figure data-type="image" tabindex="1"><img src="https://VincentZ007.github.io//post-images/1594188336720.png" alt="" loading="lazy"></figure>
<pre><code>    //插入
	public DLinkList insert(DLinkList head,int posi,int value) {
		DLinkList p=head.next;
		int count=0;
		while (count&lt;posi) {
			p=p.next;
			count++;
		}
		DLinkList q=new DLinkList();
		q.data=value;
		q.next=p.next;
		q.prior=p;
		p.next.prior=q;
		p.next=q;
		return head;
	}

    //删除
    	public DLinkList delete(DLinkList head,int posi) {
		DLinkList p=head;
		int count=0;
		while (count&lt;posi) {
			p=p.next;
			count++;
		}
		p.next.next.prior=p;
		p.next=p.next.next;
		return head;
	}
</code></pre>
<h1 id="循环链表">循环链表</h1>
<h2 id="循环单链表">循环单链表</h2>
<figure data-type="image" tabindex="2"><img src="https://VincentZ007.github.io//post-images/1594188344719.png" alt="" loading="lazy"></figure>
<h2 id="循环双链表">循环双链表</h2>
<figure data-type="image" tabindex="3"><img src="https://VincentZ007.github.io//post-images/1594188351671.png" alt="" loading="lazy"></figure>
<h2 id="静态链表">静态链表</h2>
<figure data-type="image" tabindex="4"><img src="https://VincentZ007.github.io//post-images/1594188385094.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/06/24]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200624/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200624/">
        </link>
        <updated>2020-06-24T18:21:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="单链表的各种函数">单链表的各种函数</h1>
<h3 id="获取单链表长度">获取单链表长度</h3>
<pre><code>public int findLength(LinkList list) {
		int count=0;
		while(true){
			count++;
			if(list.next==null)return count;
			list=list.next;
		}
	}

</code></pre>
<h3 id="或">或</h3>
<pre><code>	public int getLength(LinkList list) {
		int count=-1;
		while (list!=null) {
			list=list.next;
			count++;
		}
		return count;
	}
</code></pre>
<h3 id="查找链表中第一个值为e的结点">查找链表中第一个值为e的结点</h3>
<pre><code>public LinkList findEByValue(LinkList list,int e) {
		while(list!=null) {
			if(list.data==e) {
				return list;
			}
			list=list.next;
		}
		return null;
	}
</code></pre>
<h3 id="查找链表中第k个结点的值">查找链表中第k个结点的值</h3>
<pre><code>public LinkList findEByNum(LinkList list,int k) {
		if(getLength(list)&lt;k)
			return null;
		int count=0;
		while (count&lt;k) {
			list=list.next;
			count++;
		}
		return list;
	}
</code></pre>
<h3 id="颠倒单链表并输出">颠倒单链表并输出</h3>
<pre><code>public void printReverseLinkList(LinkList list) {
		LinkList head=list;
		LinkList p=list.next;
		LinkList q;
		list.next=null;
		while(p!=null) {
			q=p.next;
			p.next=head.next;
			head.next=p;
			p=q;
		}
		printLinkList(head);
	}
</code></pre>
<h3 id="去掉单链表中重复的值并返回一个删去重复值的单链表">去掉单链表中重复的值，并返回一个删去重复值的单链表</h3>
<pre><code>public LinkList deleteSame(LinkList list) {
		list=list.next;
		LinkList haha=new LinkList();
		int j=0;
		int len=getLength(list);
		int lenxixi=0;
		int[] arr=new int[100];
		for (int i = 0; i &lt; len; i++) {
			arr[list.data]++;
			list=list.next;
		}
		System.out.println();
		for (int i = 0; i &lt; arr.length; i++) {
			if(arr[i]!=0) {
				lenxixi++;
			}
		}
		int[] xixi=new int[lenxixi];
		for (int i = 0; i &lt; arr.length; i++) {
			if(arr[i]!=0) {
				xixi[j]=i;
				j++;
			}
		}
		haha = haha.TailBuildList(xixi);
		return haha;
	}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/06/22]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200622/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200622/">
        </link>
        <updated>2020-06-22T21:09:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="单链表">单链表</h1>
<h2 id="尾插法建立单链表">尾插法建立单链表</h2>
<pre><code>	// 尾插法建立单链表
	public LinkList TailBuildList(int[] arr) {
		LinkList list = new LinkList();
		list.data = 0;
		list.next = null;

		LinkList r = list;
		int count = 0;
		while (count &lt; arr.length) {
			LinkList p = new LinkList();
			p.data = arr[count];
			p.next = r.next;
			r.next = p;
			r = p;
			count++;
		}
		return list;
	}
</code></pre>
<h2 id="头插法建立单链表">头插法建立单链表</h2>
<pre><code>	// 头插法建立单链表
	public LinkList HeadBuildList(int[] arr) {
		LinkList head = new LinkList();
		head.data = 0;
		head.next = null;

		int count = 0;
		while (count &lt; arr.length) {
			LinkList p = new LinkList();
			p.data = arr[count];
			p.next = head.next;
			head.next = p;
            count++;
		}
		return head;
	}
</code></pre>
<h2 id="插入">插入</h2>
<pre><code>	public LinkList insert(LinkList list,int k,int e) {
		LinkList p=list.next;
		int count=0;
		while (count&lt;k) {
			p=p.next;
			count++;
		}
		LinkList q=new LinkList();
		q.data=e;
		q.next=p.next;
		p.next=q;
		return list;
	}
</code></pre>
<h2 id="删除">删除</h2>
<pre><code>	public LinkList delete(LinkList list,int k) {
		int count=0;
		while (count&lt;k) {
			list=list.next;
			count++;
		}
		list.next=list.next.next;
		return list;
	}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/06/20]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200620/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200620/">
        </link>
        <updated>2020-06-20T07:35:56.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h1 id="顺序表题解">顺序表题解</h1>
<p>④删除<strong>有序</strong>顺序表中所有重复的值，使得表中所有元素的值均不相同。</p>
<pre><code>	//删除有序顺序表中的重复元素
	public void deleteSame() {
		for (int i = 0; i &lt; len-1; i++) {
			if(data[i]==data[i+1]) {
				delete(i+1);
				i--;
			}
		}
	}
</code></pre>
<p>⑤删除顺序表中所有重复的值，使得表中所有元素的值均不相同。</p>
<pre><code>	//删除顺序表中的重复元素
	public void deleteSame2() {
		
		int[] arr=new int[23];
		for (int i = 0; i &lt; len; i++) {
			arr[data[i]]++;
		}
		
		System.out.println();
		for (int i = 0; i &lt; arr.length; i++) {
			if(arr[i]!=0)
				System.out.print(i+&quot; &quot;);
		}
		
	}
</code></pre>
<h1 id="单链表">单链表</h1>
<p>定义：线性表的链式存储又称单链表。它是指通过一组<strong>任意</strong>的存储单元来存储线性表中的数据元素。</p>
<p>弱点：由于单链表的元素离散的分布在存储空间中，所以单链表是一种非随机存取得存储结构。即不能直接找到表中某个特定的结点。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/06/17]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200617/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200617/">
        </link>
        <updated>2020-06-17T13:39:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-顺序表">一、顺序表</h1>
<p>##顺序表的实现</p>
<pre><code class="language-java">//顺序表
class SequenceList{
	int data[];
	int len;
}
</code></pre>
<h2 id="1-插入操作">1. 插入操作</h2>
<pre><code class="language-java">	//插入
	public boolean insert(int p,int k) {
		if(p&gt;len&amp;&amp;p&lt;0)
			return false;
		if(len&gt;data.length)
			return false;
		for (int i = len; i &gt; p; i--) {
			data[i]=data[i-1];
		}
		data[p]=k;
		len++;
		return true;
	}
</code></pre>
<h2 id="2-删除操作">2. 删除操作</h2>
<pre><code class="language-java">	//删除
	public boolean delete(int p) {
		if(p&lt;0&amp;&amp;p&gt;len) {
			return false;
		}
		if(len&gt;data.length) {
			return false;
		}
		for(int i=p;i&lt;len;i++) {
			data[i]=data[i+1];
		}
		len--;
		return true;
	}
</code></pre>
<h2 id="3-按值查找操作">3. 按值查找操作</h2>
<pre><code class="language-java">	//查找
	public int findElem(int k) {
		for (int i = 0; i &lt; len; i++) {
			if(data[i]==k)
				return i;
		}
		return 0;
	}
</code></pre>
<h2 id="4-时间复杂度">4. 时间复杂度</h2>
<figure data-type="image" tabindex="1"><img src="https://VincentZ007.github.io//post-images/1592379914573.png" alt="" loading="lazy"></figure>
<h2 id="题目巩固">题目巩固：</h2>
<p>①在一个长度为n的顺序表中删除第i个元素时，需要向前移动（）个元素。<br>
②找到顺序表中最小值，并打印；<br>
③将顺序表中所有元素逆置；<br>
④删除<strong>有序</strong>顺序表中所有重复的值，使得表中所有元素的值均不相同。<br>
⑤删除顺序表中所有重复的值，使得表中所有元素的值均不相同。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/06/15]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-20200615/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-20200615/">
        </link>
        <updated>2020-06-15T10:21:49.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h1 id="center数据结构center"><center>数据结构</center></h1>
<h2 id="center一-概要center"><center>一、概要</center></h2>
<h3 id="1-数据结构的基本概念">1、数据结构的基本概念</h3>
<p>① 数据：数据是计算机程序加工的原料。<br>
② 数据元素：是数据的基本单位。<br>
③ 数据项：是构成数据元素的最小单位。<br>
④ 数据对象：具有相同性质的数据元素的结合。<br>
⑤ 数据类型：是一个值得集合和定义一组操作的总称。<br>
⑥ 是相互之间存在一种或者多种特定关系的数据元素的集合。</p>
<h3 id="2-数据结构三要素">2、数据结构三要素</h3>
<p>① 数据的逻辑结构：逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。 它与数据的存储无关，是独立于计算机的。<br>
② 数据的存储结构：存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。 它包括数据元素的表示和关系的表示。<br>
③ 数据的运算：施加在数据上的运算包括运算的定义和实现。</p>
<h2 id="center二-算法及评价center"><center>二、算法及评价</center></h2>
<h3 id="1-基本概念">1、基本概念</h3>
<p>① 算法效率的度量：通过时间复杂度和空间复杂度来描述的。</p>
<h3 id="2-时间复杂度和空间复杂度">2、时间复杂度和空间复杂度</h3>
<p>② 时间复杂度：某个语句在该算法中被重复执行的次数。<br>
③ 空间复杂度：为该算法所耗费的存储空间。</p>
<h2 id="center三-线性表center"><center>三、线性表</center></h2>
<p>概念：具有相同数据类型的n个数据元素的有限序列。<br>
L=(a1,a2,a3,...,an);<br>
<img src="https://VincentZ007.github.io//post-images/1592205057433.png" alt="" loading="lazy"><br>
1.顺序存储<br>
概念:用一组地址连续的存储单元依次存储线性表中的数据元素。</p>
<pre><code>typedef struct{
        int data[];
        int n;
}
</code></pre>
<p>2.链式存储(单链表、双链表、循环链表)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-2020/6/14]]></title>
        <id>https://VincentZ007.github.io/post/bi-ji-2020614/</id>
        <link href="https://VincentZ007.github.io/post/bi-ji-2020614/">
        </link>
        <updated>2020-06-14T20:22:54.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>添加百度统计😁</p>
</li>
<li>
<p>MarkDown基本语法学习😆</p>
<hr>
</li>
</ol>
<pre><code>##1.标题
&gt; 兼容Html语法， 标题逐渐变小: \&lt;h1&gt;-\&lt;h5&gt;
&gt; Markdwon情法， 标题逐新变小:
&gt; #
&gt; ##
&gt; ###
&gt; ####
&gt; #####
&lt;h1&gt;月夜与客饮酒杏花下&lt;/h1&gt;
&lt;h5&gt;宋代:苏轼&lt;/h5&gt;

---

##2.换行
&gt; \&lt;br/&gt;

---

##3.字体样式
&gt; \*content*斜体
&gt; \**content**粗体
&gt; \***content***粗斜体

---

##4.分割线
\---
\***

---

##5.划掉线
~~划掉文字~~

   ---

##6.下划线
&lt;u&gt;下划文字&lt;/u&gt;

   ---

##7.无序列表
+ 无序列表
- 无序列表
* 无序列表

   ---

##8.有序列表
1. 第一列
2. 第二列

   ---

##9.嵌套模块
&gt;第一层
&gt;&gt;第二层
&gt;&gt;&gt;第三层

   ---

##10.链接
直接显示链接: &lt;https://www.baidu.com&gt;
隐藏链接: [百度](https://www.baidu.com)

   ---

##11.图片
![头像](https://photos-1258928558.cos.ap-guangzhou.myqcloud.com/avatar_1591965590089.jpeg)

   ---

##12.表格
|  表头   | 表头  |
|  ----  | ----  |
| 单元格  | 单元格 |
| 单元格  | 单元格 |

   ---

##13.[markdown语法链接](https://www.runoob.com/markdown/md-tutorial.html)
</code></pre>
<hr>
<p>##1.标题</p>
<blockquote>
<p>兼容Html语法， 标题逐渐变小: &lt;h1&gt;-&lt;h5&gt;<br>
Markdwon情法， 标题逐新变小:</p>
<h1 id=""></h1>
<h2 id="-2"></h2>
<h3 id="-3"></h3>
<h4 id="-4"></h4>
<h5 id="-5"></h5>
</blockquote>
<h1>月夜与客饮酒杏花下</h1>
<h5>宋代:苏轼</h5>
<hr>
<p>##2.换行</p>
<blockquote>
<p>&lt;br/&gt;</p>
</blockquote>
<hr>
<p>##3.字体样式</p>
<blockquote>
<p>*content*斜体<br>
**content*<em>粗体<br>
*<strong>content</strong></em>粗斜体</p>
</blockquote>
<hr>
<p>##4.分割线<br>
---<br>
***</p>
<hr>
<p>##5.划掉线<br>
<s>划掉文字</s></p>
<hr>
<p>##6.下划线<br>
<u>下划文字</u></p>
<hr>
<p>##7.无序列表</p>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>
<p>无序列表</p>
<hr>
</li>
</ul>
<p>##8.有序列表</p>
<ol>
<li>
<p>第一列</p>
</li>
<li>
<p>第二列</p>
<hr>
</li>
</ol>
<p>##9.嵌套模块</p>
<blockquote>
<p>第一层</p>
<blockquote>
<p>第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<p>##10.链接<br>
直接显示链接: <a href="https://www.baidu.com">https://www.baidu.com</a><br>
隐藏链接: <a href="https://www.baidu.com">百度</a></p>
<hr>
<p>##11.图片<br>
<img src="https://photos-1258928558.cos.ap-guangzhou.myqcloud.com/avatar_1591965590089.jpeg" alt="头像" loading="lazy"></p>
<hr>
<p>##12.表格</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody>
</table>
<hr>
<p>##13.<a href="https://www.runoob.com/markdown/md-tutorial.html">markdown语法链接</a></p>
]]></content>
    </entry>
</feed>